//
//  SnakeSegments.swift
//  SnakeGame
//
//  Created by PavelPopov on 07.09.16.
//  Copyright (c) 2016 PixelCut. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

open class SnakeSegments : NSObject {

    //// Cache

    fileprivate struct Cache {
        static let bodyColor: UIColor = UIColor(red: 0.000, green: 1.000, blue: 0.338, alpha: 1.000)
        static let foodColor: UIColor = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)
    }

    //// Colors

    open class var bodyColor: UIColor { return Cache.bodyColor }
    open class var foodColor: UIColor { return Cache.foodColor }

    //// Drawing Methods

    open class func drawHeadSymbol(open: Bool = false, angle: CGFloat = 90) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let bodyColor2 = SnakeSegments.bodyColor.colorWithShadow(0.5)

        //// Variable Declarations
        let endAngle: CGFloat = open ? 125 : 90
        let startAngle: CGFloat = open ? 415 : 450

        //// Oval Drawing
        context?.saveGState()
        context?.translateBy(x: 30, y: 30)
        context?.rotate(by: -angle * CGFloat(M_PI) / 180)

        let ovalRect = CGRect(x: -25, y: -25, width: 50, height: 50)
        let ovalPath = UIBezierPath()
        ovalPath.addArc(withCenter: CGPoint(x: ovalRect.midX, y: ovalRect.midY), radius: ovalRect.width / 2, startAngle: -startAngle * CGFloat(M_PI)/180, endAngle: -endAngle * CGFloat(M_PI)/180, clockwise: true)
        ovalPath.addLine(to: CGPoint(x: ovalRect.midX, y: ovalRect.midY))
        ovalPath.close()

        SnakeSegments.bodyColor.setFill()
        ovalPath.fill()
        bodyColor2.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()

        context?.restoreGState()
    }

    open class func drawHead(open: Bool = false, angle: CGFloat = 90, bounds: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Symbol Drawing
        let symbolRect = CGRect(x: bounds.origin.x, y: bounds.origin.y, width: bounds.size.width, height: bounds.size.height)
        context?.saveGState()
        UIRectClip(symbolRect)
        context?.translateBy(x: symbolRect.origin.x, y: symbolRect.origin.y)
        context?.scaleBy(x: symbolRect.size.width / 60, y: symbolRect.size.height / 60)

        SnakeSegments.drawHeadSymbol(open: open, angle: angle)
        context?.restoreGState()
    }

    open class func drawTailSymbol(angle: CGFloat = 90) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let bodyColor2 = SnakeSegments.bodyColor.colorWithShadow(0.5)

        //// Polygon Drawing
        context?.saveGState()
        context?.translateBy(x: 30, y: 30)
        context?.rotate(by: -(angle - 90) * CGFloat(M_PI) / 180)

        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: 24, y: 0))
        polygonPath.addLine(to: CGPoint(x: -25, y: 20.35))
        polygonPath.addLine(to: CGPoint(x: -25, y: -20.35))
        polygonPath.addLine(to: CGPoint(x: 24, y: 0))
        polygonPath.close()
        SnakeSegments.bodyColor.setFill()
        polygonPath.fill()
        bodyColor2.setStroke()
        polygonPath.lineWidth = 2
        polygonPath.stroke()

        context?.restoreGState()
    }

    open class func drawTail(angle: CGFloat = 90, bounds: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Symbol Drawing
        let symbolRect = CGRect(x: bounds.origin.x, y: bounds.origin.y, width: bounds.size.width, height: bounds.size.height)
        context?.saveGState()
        UIRectClip(symbolRect)
        context?.translateBy(x: symbolRect.origin.x, y: symbolRect.origin.y)
        context?.scaleBy(x: symbolRect.size.width / 60, y: symbolRect.size.height / 60)

        SnakeSegments.drawTailSymbol(angle: angle)
        context?.restoreGState()
    }

    open class func drawFoodSymbol() {
        //// Color Declarations
        let foodColor2 = SnakeSegments.foodColor.colorWithShadow(0.5)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 18, y: 5, width: 25, height: 25))
        SnakeSegments.foodColor.setFill()
        ovalPath.fill()
        foodColor2.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 28, y: 27, width: 4, height: 28))
        SnakeSegments.foodColor.setFill()
        rectanglePath.fill()
        foodColor2.setStroke()
        rectanglePath.lineWidth = 2
        rectanglePath.stroke()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 5, y: 17, width: 25, height: 25))
        SnakeSegments.foodColor.setFill()
        oval2Path.fill()
        foodColor2.setStroke()
        oval2Path.lineWidth = 2
        oval2Path.stroke()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalIn: CGRect(x: 30, y: 17, width: 25, height: 25))
        SnakeSegments.foodColor.setFill()
        oval3Path.fill()
        foodColor2.setStroke()
        oval3Path.lineWidth = 2
        oval3Path.stroke()
    }

    open class func drawFood(bounds: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Symbol Drawing
        let symbolRect = CGRect(x: bounds.origin.x, y: bounds.origin.y, width: bounds.size.width, height: bounds.size.height)
        context?.saveGState()
        UIRectClip(symbolRect)
        context?.translateBy(x: symbolRect.origin.x, y: symbolRect.origin.y)
        context?.scaleBy(x: symbolRect.size.width / 60, y: symbolRect.size.height / 60)

        SnakeSegments.drawFoodSymbol()
        context?.restoreGState()
    }

    open class func drawBorderSymbol() {
        //// Color Declarations
        let borderColor = UIColor(red: 0.485, green: 0.485, blue: 0.485, alpha: 1.000)
        let borderColor2 = borderColor.colorWithShadow(0.5)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 5, y: 5, width: 50, height: 50), cornerRadius: 10)
        borderColor.setFill()
        rectanglePath.fill()
        borderColor2.setStroke()
        rectanglePath.lineWidth = 2
        rectanglePath.stroke()
    }

    open class func drawBorder(bounds: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Symbol Drawing
        let symbolRect = CGRect(x: bounds.origin.x, y: bounds.origin.y, width: bounds.size.width, height: bounds.size.height)
        context?.saveGState()
        UIRectClip(symbolRect)
        context?.translateBy(x: symbolRect.origin.x, y: symbolRect.origin.y)
        context?.scaleBy(x: symbolRect.size.width / 60, y: symbolRect.size.height / 60)

        SnakeSegments.drawBorderSymbol()
        context?.restoreGState()
    }

    open class func drawMiddleSymbol() {
        //// Color Declarations
        let bodyColor2 = SnakeSegments.bodyColor.colorWithShadow(0.5)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 5, y: 5, width: 50, height: 50))
        SnakeSegments.bodyColor.setFill()
        ovalPath.fill()
        bodyColor2.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()
    }

    open class func drawMiddle(bounds: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Symbol Drawing
        let symbolRect = CGRect(x: bounds.origin.x, y: bounds.origin.y, width: bounds.size.width, height: bounds.size.height)
        context?.saveGState()
        UIRectClip(symbolRect)
        context?.translateBy(x: symbolRect.origin.x, y: symbolRect.origin.y)
        context?.scaleBy(x: symbolRect.size.width / 60, y: symbolRect.size.height / 60)

        SnakeSegments.drawMiddleSymbol()
        context?.restoreGState()
    }

}



extension UIColor {
    func colorWithHue(_ newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func colorWithSaturation(_ newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func colorWithBrightness(_ newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func colorWithAlpha(_ newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, brightness: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func colorWithHighlight(_ highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func colorWithShadow(_ shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}
